In this class, we learned about the order of operations of arithmetic operators, python built-in functions, data types, and errors.

Operators can be unary or binary. Exponentiation, multiplication, division, modulus and assignment are binary operators. Plus and minus operators can be unary or binary. We can tell that an operator is unary or binary based on the number of operands (an operand can be a value or a variable) that surrounds it. 

Python built-in functions are accessible to us without having to do anything else. Some examples of built-in functions are: print, input, abs, round. Input function captures what the user types before they press enter on the keyboard, and it returns it to us as a string (text) type.

Data types are important because they help the interpreter to make sense of the expression. Addition (+) and multiplication (*) are operators that work with numbers and strings (text). Based on the operands type surrounding the operator the interpreter makes a decision on how to interpret the expression. For example, if the operands are numbers then the interpreter performs the arithmetic operation addition/multiplication. If the operands are strings (text), the interpreter performs string concatenation for +. For multiplication, if one and only one operand is string (text) and the other is a whole number (integer), the interpreter performs string repetition, otherwise the interpreter gives a Type Error (which is a runtime error).

There are 3 types of errors: syntax, runtime, and semantic (logic). The Python interpreter can only inform us of 2: syntax or runtime. For semantic errors we need to test our code to make sure it does what itâ€™s supposed to (more on testing in the near future). Syntax errors tell us that we have violated one of Python's rules of writing expressions (for example: rules for naming variables, or writing operator or function-call expressions). Runtime errors tell us that while our code looks right, it failed to execute due to a violation (be it a type, value or name violation, which gives it the name of the error). 
