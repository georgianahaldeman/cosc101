In this class, we learned that computers were designed as programmable internal-state machines almost 100 years ago, but underwent constant development to the point that they now obfuscate (abstract) many important aspects from their users. As computer scientists and programmers, we will interact more closely with the programmable internal-state machine and so we need to understand how it operates as well as learning how to write instructions for it to perform certain tasks.

We write instructions as expressions and we combine expressions into statements that represent lines in our programs. There are two fundamentally different types of basic expressions: function-call expressions and operator expressions. Some basic operators are arithmetic operators: addition, subtraction, multiplication, division, floor division, modulus (remainder), and power (exponentiation). Division always produces a decimal (float) result and if there is a decimal (float) value in our expression, the result will be decimal (float) - I summarized this rule as decimal numbers (floats) win over whole numbers (integers).

Another important operator is the assignment operator (=) used in assignment statements. In programming, variables are the way to save information for later usage in the internal-state of the program. An assignment statement saves a value to a variable. The variable “is set to” the value after the "=" operator.

The assignment operator is different from the "=" operator in math. Equality in math represents a relation that is two way; for that reason in math x=y and y=x are equivalent, but they are NOT in computer science. = represents assignment in computer science and it works one way: the value on the right-hand-side is copied to the variable on the left-hand-side of the operator. 

Lastly, we learned a function-call expression using the built-in Python function print that displays values on the screen.
